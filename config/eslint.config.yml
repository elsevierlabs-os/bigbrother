parser: "@babel/eslint-parser"

env:
  browser: false     # browser global variables.
  node: false        # Node.js global variables and Node.js-specific rules.
  amd: false         # defines require() and define() as global variables as per the amd spec.
  mocha: false       # adds all of the Mocha testing global variables.
  jasmine: false     # adds all of the Jasmine testing global variables for version 1.3 and 2.0.
  phantomjs: false   # phantomjs global variables.
  jquery: false      # jquery global variables.
  prototypejs: false # prototypejs global variables.
  shelljs: false      # shelljs global variables.
  es6: true

parserOptions:
  ecmaVersion: 6
  sourceType: "module"
  ecmaFeatures:
    modules: true
    binaryLiterals: false                    # enable binary literals
    blockBindings: false                     # enable let and const (aka block bindings)
    defaultParams: false                     # enable default function parameters
    forOf: false                             # enable for-of loops
    generators: false                        # enable generators
    experimentalObjectRestSpread: true
    objectLiteralComputedProperties: false   # enable computed object literal property names
    objectLiteralDuplicateProperties: false  # enable duplicate object literal properties in strict mode
    objectLiteralShorthandMethods: false     # enable object literal shorthand methods
    objectLiteralShorthandProperties: false  # enable object literal shorthand properties
    octalLiterals: false                     # enable octal literals
    regexUFlag: false                        # enable the regular expression u flag
    regexYFlag: false                        # enable the regular expression y flag
    templateStrings: false                   # enable template strings
    unicodeCodePointEscapes: false           # enable code point escapes
    jsx: true
  babelOptions:
    configFile: "./config/babel.config.js"

plugins:
  - "mocha"

rules:

  # POSSIBLE ERRORS

  comma-dangle: 2            # disallow trailing commas in object literals
  no-cond-assign: 2          # disallow assignment in conditional expressions
  no-console: 1              # disallow use of console (off by default in the node environment)
  no-constant-condition: 2   # disallow use of constant expressions in conditions
  no-control-regex: 2        # disallow control characters in regular expressions
  no-debugger: 1             # disallow use of debugger
  no-dupe-args: 2            # disallow duplicate arguments in functions
  no-dupe-keys: 2            # disallow duplicate keys when creating object literals
  no-duplicate-case: 2       # disallow a duplicate case label
  no-empty-character-class: 1 # disallow the use of empty character classes in regular expressions
  no-empty: 1                # disallow empty statements
  no-ex-assign: 1            # disallow assigning to the exception in a catch block
  no-extra-boolean-cast: 2   # disallow double-negation boolean casts in a boolean context
  no-extra-semi: 2           # disallow unnecessary semicolons
  no-func-assign: 1          # disallow overwriting functions written as function declarations
  no-inner-declarations: 1   # disallow function or variable declarations in nested blocks
  no-invalid-regexp: 2       # disallow invalid regular expression strings in the RegExp constructor
  no-irregular-whitespace: 2 # disallow irregular whitespace outside of strings and comments
  no-negated-in-lhs: 2       # disallow negation of the left operand of an in expression
  no-obj-calls: 2            # disallow the use of object properties of the global object (Math and JSON) as functions
  no-regex-spaces: 1         # disallow multiple spaces in a regular expression literal
  no-sparse-arrays: 2        # disallow sparse arrays
  no-unreachable: 2          # disallow unreachable statements after a return throw continue or break statement
  use-isnan: 2               # disallow comparisons with the value NaN
  valid-jsdoc: 1             # Ensure JSDoc comments are valid
  valid-typeof: 2            # Ensure that the results of typeof are compared against a valid string
  no-unexpected-multiline: 2 # Avoid code that looks like two expressions but is actually one


  # BEST PRACTICES

  object-curly-spacing:
    - 1
    - 'always'

  accessor-pairs: 0            # Enforces getter/setter pairs in objects
  complexity:                  # specify the maximum cyclomatic complexity allowed in a program
    - 1
    - 20
  consistent-return: 0         # require return statements to either always or never specify values
  curly: 2                     # specify curly brace conventions for all control statements
  default-case: 2              # require default case in switch statements
  dot-notation: 1              # encourages use of dot notation whenever possible
  dot-location:
    - 1
    - "property"               # enforces consistent newlines before or after dots
  eqeqeq: 2                    # require the use of === and !==
  guard-for-in: 2              # make sure for-in loops have an if statement
  no-alert: 1                  # disallow the use of alert confirm and prompt
  no-caller: 2                 # disallow use of arguments.caller or arguments.callee
  no-div-regex: 1              # disallow division operators explicitly at beginning of regular expression
  no-else-return: 2            # disallow else after a return in an if
  no-eq-null: 2                # disallow comparisons to null without a type-checking operator
  no-eval: 2                   # disallow use of eval()
  no-extend-native: 2          # disallow adding to native types
  no-extra-bind: 2             # disallow unnecessary function binding
  no-fallthrough: 2            # disallow fallthrough of case statements
  no-floating-decimal: 2       # disallow the use of leading or trailing decimal points in numeric literals
  no-implicit-coercion: 1      # disallow the type conversions with shorter notations
  no-implied-eval: 2           # disallow use of eval()-like methods
  no-invalid-this: 0           # disallow this keywords outside of classes or class-like objects
  no-iterator: 2               # disallow usage of __iterator__ property
  no-labels: 2                 # disallow use of labeled statements
  no-lone-blocks: 2            # disallow unnecessary nested blocks
  no-loop-func: 2              # disallow creation of functions within loops
  no-multi-spaces: 1           # disallow use of multiple spaces
  no-multi-str: 2              # disallow use of multiline strings
  no-native-reassign: 2        # disallow reassignments of native objects
  no-new-func: 2               # disallow use of new operator for Function object
  no-new-wrappers: 2           # disallows creating new instances of String Number and Boolean
  no-new: 2                    # disallow use of new operator when not part of the assignment or comparison
  no-octal-escape: 1           # disallow use of octal escape sequences in string literals such as var foo = Copyright \251";
  no-octal: 2                  # disallow use of octal literals
  no-param-reassign: 1         # disallow reassignment of function parameters
  no-proto: 2                  # disallow usage of __proto__ property
  no-redeclare: 2              # disallow declaring the same variable more then once
  no-return-assign: 2          # disallow use of assignment in return statement
  no-script-url: 2             # disallow use of javascript: urls.
  no-self-compare: 2           # disallow comparisons where both sides are exactly the same
  no-sequences: 2              # disallow use of comma operator
  no-throw-literal: 2          # restrict what can be thrown as an exception
  no-unused-expressions: 1     # disallow usage of expressions in statement position
  no-void: 2                   # disallow use of void operator
  no-with: 2                   # disallow use of the with statement
  radix: 2                     # require use of the second argument for parseInt() (off by default)
  vars-on-top: 1               # requires to declare all vars on top of their containing scope (off by default)
  wrap-iife:
    - 2
    - "any"                    # require immediate function invocation to be wrapped in parentheses (off by default)
  yoda: 2                      # require or disallow Yoda conditions


  # STRICT MODE

  strict: 0                     # controls location of Use Strict Directives


  # VARIABLES

  no-delete-var: 1               # disallow deletion of variables
  no-shadow-restricted-names: 1  # disallow shadowing of names such as arguments
  no-shadow: 0                   # disallow declaration of variables already declared in the outer scope
  no-undef-init: 2               # disallow use of undefined when initializing variables
  no-unused-vars: 0              # disallow declaration of variables that are not used in the code
  no-use-before-define: 2        # disallow use of variables before they are defined


  # NODE.JS

  callback-return: 1       # enforce return after a callback"
  global-require: 0        # disallow require() outside of the top-level module scope"
  handle-callback-err: 1   # enforces error handling in callbacks (off by default) (on by default in the node environment)
  no-new-require: 1        # disallow use of new operator with the require function (off by default) (on by default in the node environment)
  no-path-concat: 1        # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
  no-process-exit: 1       # disallow process.exit() (on by default in the node environment)
  no-sync: 2               # disallow use of synchronous methods (off by default)


  # CODE STYLE

  computed-property-spacing: 1 # require or disallow padding inside computed properties
  indent:                      # specify rules for indentation (including tab or space width) for your code (fixable)
    - 1
    - 4
  jsx-quotes:                  # specify whether double or single quotes should be used in JSX attributes
    - 1
    - "prefer-double"
  key-spacing: 1               # enforces spacing between keys and values in object literal
  no-mixed-spaces-and-tabs: 1  # disallow mixed spaces and tabs for indentation
  no-spaced-func: 1            # disallow space between function identifier and application
  no-trailing-spaces: 1        # disallow trailing whitespace at the end of lines
  semi: 1                      # require or disallow use of semicolons instead of ASI
  space-in-parens: 1           # require or disallow spaces inside parentheses (off by default)
  space-infix-ops: 1           # require spaces around operators


  # ECMAScript 6

  no-var: 2                  # require let or const instead of var (off by default)
  generator-star-spacing: 1  # enforce the position of the * in generator functions (off by default)


  # LEGACY

  max-len:
    - 1
    - code: 120
      ignorePattern: "<[^>]*script" # specify the maximum length of a line in your program (off by default)


  # TESTS

  mocha/no-exclusive-tests: "error"
